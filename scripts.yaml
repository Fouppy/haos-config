start_speakers:
  alias: Start speakers
  description: Start a Spotify playlist on Chromecast
  fields:
    volume:
      description: Volume at which to play
      example: "0.1"
    source:
      description: Which source to use on the speakers
      example: Spotify
    entity_id:
      description: entity_id of the speaker
      example: media_player.chromecast_2
  variables:
    volume: "{% if volume %}volume{% else %}0.1{% endif %}"
    source: "{% if source %}source{% else %}Spotify{% endif %}"
    entity_id: "{% if entity_id %}entity_id{% else %}media_player.chromecast_2{% endif %}"
  sequence:
    - action: media_player.select_source
      data:
        entity_id: "{{ entity_id }}"
        source: "{{ source }}"
    - action: media_player.volume_set
      data:
        entity_id: "{{ entity_id }}"
        volume_level: "{{ volume }}"

start_spotify:
  alias: Start Spotify
  description: Start a Spotify playlist on Chromecast
  fields:
    source:
      description: The name of the speaker as it appears in Spotify
      example: Chromecast
    id:
      description: The playlist/album/podcast URI from Spotify
      example: playlist:6rPTm9dYftKcFAfwyRqmDZ
  variables:
    media_content_type: "{{ id.split(':')[0] }}"
    media_content_id: "spotify:{{ id }}"
  sequence:
    - action: homeassistant.update_entity
      entity_id: media_player.spotify_fouppy
    - if: >
        {{ not (is_state('media_player.spotify_fouppy', 'playing')
                and is_state_attr('media_player.spotify_fouppy', 'source', 'Chromecast')) }}"
      then:
        - wait_template: '{{ source in state_attr("media_player.spotify_fouppy", "source_list")  }}'
          timeout: 00:01:00
          continue_on_timeout: false
        - action: media_player.select_source
          entity_id: media_player.spotify_fouppy
          data:
            source: "{{ source }}"
    - action: media_player.shuffle_set
      entity_id: media_player.spotify_fouppy
      data:
        shuffle: true
    - entity_id: media_player.spotify_fouppy
      action: media_player.play_media
      data:
        entity_id: media_player.spotify_fouppy
        media_content_type: "{{ media_content_type }}"
        media_content_id: "{{ media_content_id }}"
    - action: media_player.media_play
      entity_id: media_player.spotify_fouppy

start_spotify_playlist_of_nearest_person:
  alias: Start Spotify
  description: Start a Spotify playlist on Chromecast
  fields:
    source:
      description: The name of the speaker as it appears in Spotify
      example: Chromecast
    entity_id:
      description: entity_id of the speaker
      example: media_player.chromecast_2
  sequence:
    - action: script.start_speakers
      data:
        source: Spotify
        volume: 0.1
        entity_id: "{{ entity_id }}"
    - action: script.start_spotify
      data:
        source: "{{ source }}"
        id: >
          playlist:{{ states("sensor.favorite_playlist_of_nearest_person") }}
        volume: 0.1

night_lights_living_room:
  alias: Set night lights in the living room
  mode: parallel
  sequence:
    - data:
        entity_id:
          - light.living_room_main_light
          - light.living_room_tv_light
          - light.living_room_red_lava_lamp
          - light.living_room_blue_lava_lamp
      action: light.turn_off
    - data:
        entity_id:
          - light.living_room_red_lamp
          - light.living_room_string_lights
      action: light.turn_on
    - action: input_select.select_option
      entity_id: input_select.last_script_living_room
      data:
        option: script.night_lights_living_room

cozy_lights_living_room:
  alias: Set cozy lights in the living room
  mode: parallel
  sequence:
    - data:
        entity_id:
          - light.living_room_main_light
      action: light.turn_off
    - data:
        entity_id:
          - light.living_room_red_lamp
          - light.living_room_string_lights
          - light.living_room_blue_lava_lamp
          - light.living_room_red_lava_lamp
          - light.living_room_tv_light
      action: light.turn_on
    - action: input_select.select_option
      entity_id: input_select.last_script_living_room
      data:
        option: script.cozy_lights_living_room

white_lights_living_room:
  alias: Set white lights in the living room
  mode: parallel
  sequence:
    - data:
        entity_id:
          - light.living_room_red_lamp
          - light.living_room_string_lights
          - light.living_room_blue_lava_lamp
          - light.living_room_red_lava_lamp
      action: light.turn_off
    - data:
        entity_id:
          - light.living_room_main_light
          - light.living_room_tv_light
      action: light.turn_on
    - action: input_select.select_option
      entity_id: input_select.last_script_living_room
      data:
        option: script.white_lights_living_room

turn_off_everything_non_automatic:
  alias: Turn off everything
  mode: parallel
  sequence:
    - action: light.turn_off
      data:
        transition: 4
        entity_id:
          - light.living_room_lights
          - light.bedroom_lights
          - light.office_lights
          - light.hall_lights
          - light.kitchen_lights
    - action: media_player.turn_off
      entity_id: media_player.chromecast_2

turn_off_everything:
  alias: Turn off everything
  mode: parallel
  sequence:
    - action: light.turn_off
      entity_id: all
    - action: script.turn_off_everything_non_automatic

going_to_sleep:
  alias: Going to sleep
  mode: parallel
  sequence:
    - entity_id: input_select.sleep_mode
      action: input_select.select_option
      data:
        option: "total"
    - action: script.turn_off_everything_non_automatic

next_colors:
  alias: Change the colors of lights
  mode: parallel
  fields:
    input_select:
      description: The input select that lists script names.
      example: input_select.last_script_living_room
  sequence:
    - action: input_select.select_next
      data:
        entity_id: "{{ input_select }}"
    - action: "{{ states(input_select) }}"

start_tv:
  alias: Start TV
  sequence:
    if: "{{ is_state('media_player.chromecast_2', 'off') }}"
    then:
      - action: media_player.turn_on
        data:
          entity_id: media_player.chromecast_2
      - delay:
          milliseconds: 5000

start_netflix:
  alias: Start Netflix
  sequence:
    - action: script.start_tv
    - data:
        source: Netflix
      entity_id: media_player.chromecast_2
      action: media_player.select_source

start_fireplace:
  alias: Start fireplace on YouTube
  sequence:
    - action: script.start_tv
    - action: webostv.command
      data:
        command: system.launcher/launch
        payload:
          id: youtube.leanback.v4
          contentId: v=cdKop6aixVE
        entity_id: media_player.chromecast_2
    - delay:
        milliseconds: 3000
    - action: webostv.button
      entity_id: media_player.chromecast_2
      data:
        button: ENTER # enter into "All settings"
    - action: media_player.volume_set
      data:
        entity_id: media_player.chromecast_2
        volume_level: 0.2

start_fireplace_netflix:
  alias: Start fireplace on Netflix
  sequence:
    - action: script.start_tv
    - action: webostv.command
      data:
        command: system.launcher/launch
        payload:
          id: netflix
          contentId: m=http://api.netflix.com/catalog/titles/movies/80092835&source_type=4
        entity_id: media_player.chromecast_2
    - delay:
        milliseconds: 3000
    - action: webostv.button
      entity_id: media_player.chromecast_2
      data:
        button: ENTER # enter into "All settings"
    - action: media_player.volume_set
      data:
        entity_id: media_player.chromecast_2
        volume_level: 0.08

set_low_temperature:
  alias: Set low temperature
  sequence:
    - action: climate.set_temperature
      entity_id: climate.thermostat
      data:
        temperature: >
          {{ states("input_number.temperature_low") }}

set_high_temperature:
  alias: Set high temperature
  sequence:
    - action: climate.set_temperature
      entity_id: climate.thermostat
      data:
        temperature: >
          {{ states("input_number.temperature_high") }}

toggle_thermostat_off_heat:
  alias: Toggle climate between 'off' and 'heat'
  sequence:
    - action: climate.set_hvac_mode
      entity_id: climate.thermostat
      data:
        hvac_mode: |-
          {{ "off" if is_state('climate.thermostat', "heat") else "heat" }}

leaving:
  alias: Leaving the house
  sequence:
    - action: script.set_low_temperature
    - action: script.turn_off_everything

arriving:
  alias: Arriving home
  sequence:
    - action: script.set_high_temperature
    - action: script.cozy_lights_living_room

utility_notification:
  alias: Utility notification
  fields:
    name:
      description: name
      example: washing_machine
    emojis:
      description: emojis
      example: "ðŸ‘šðŸ‘•"
  sequence:
    - action: "{{ states('sensor.nearest_phone_notify') }}"
      data:
        title: "Utilities"
        message: "{{ name }} is done {{ emojis }}"
